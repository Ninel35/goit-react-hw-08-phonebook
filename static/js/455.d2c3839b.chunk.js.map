{"version":3,"file":"static/js/455.d2c3839b.chunk.js","mappings":"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","sources":["components/ElementContact/ElementContact.jsx","webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","store/selectors.js","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/FormUser/FormUser.module.css?f252","components/FormUser/FormUser.jsx","pages/ContactsPage.jsx"],"sourcesContent":["const ElementContact = ({ contact, children }) => {\n    return (\n        <li id={contact.id} > {contact.name}   {contact.number}\n           {children}\n        </li>\n     \n    )\n};\nexport default ElementContact;","// extracted by mini-css-extract-plugin\nexport default {\"deluser\":\"Contacts_deluser__i-pfy\"};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectorContacts = state => state.contacts.contacts;\nexport const selectorLoading = state => state.contacts.loading;\nexport const selectorError = state => state.contacts.error;\nexport const selectorFilter = state => state.filter.filter;\n\nexport const selectorVisibleContacts = createSelector(\n    [selectorContacts, selectorFilter],\n    (contacts, filter) => {\n        return contacts.filter(contact => contact.name.toLowerCase()\n            .includes(filter.toLowerCase()))\n    }\n)","import ElementContact from \"components/ElementContact/ElementContact\";\nimport css from './Contacts.module.css'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport React, { useEffect } from 'react'\nimport { deleteContactThunk, getContactsThunk } from \"store/thunks\";\nimport { selectorError, selectorLoading, selectorVisibleContacts } from \"store/selectors\";\n\nconst Contacts = () => {\n    const contacts = useSelector(selectorVisibleContacts)\n    const loading = useSelector(selectorLoading)\n    const error = useSelector(selectorError)\n    \n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getContactsThunk())\n    }, [dispatch])\n\n    const handleDelete = (evt) => {\n        dispatch(deleteContactThunk(evt.target.parentElement.id))\n    }\n  \n    return (\n        <>\n            {loading && <h2>Loading...</h2>}\n            {error&& <h2>{error}</h2>}\n            <ul>\n                {\n                    contacts.map((contact) => (\n                        <ElementContact contact={contact} key={contact.id} >\n                           <button className={css.deluser} onClick={handleDelete} type=\"button\">Delete</button>\n                        </ElementContact>\n                    ))}\n            </ul>\n        </>\n    )\n};\nexport default Contacts;","import { setFilterAction } from \"store/Filter/filterSlice\";\nimport React from 'react'\nimport { useDispatch } from \"react-redux\";\n\n\nconst Filter = () => {\n    const dispatch = useDispatch()\n    \n    const handlerFilter = (evt) => {\n        dispatch(setFilterAction(evt.target.value))\n    }\n    \n    return (\n        <>\n         \n            <p>Find contacts by name</p>\n            <input onChange={handlerFilter} type=\"text\" name=\"filter\" />\n           \n        </>\n     \n    );\n};\nexport default Filter;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"formuser\":\"FormUser_formuser__gZ1vS\"};","import { nanoid } from 'nanoid';\nimport css from './FormUser.module.css';\nimport React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContactThunk } from 'store/thunks';\nimport { selectorContacts } from 'store/selectors';\n\n\nconst FormUser = () => {\n  \n    const contacts = useSelector(selectorContacts)\n\n    \n    const  [name, setName]  = useState('')\n    const [number, setNumber] = useState('')\n    \n    const dispatch = useDispatch()\n\n    const sendUserData = (data) => {\n        if (contacts.find(({ name }) => name.toLowerCase() === data.name.toLowerCase())) {\n            alert(data.name + \" is already in contacts\")\n            return;\n        }\n        dispatch(addContactThunk(data))\n    }\n   \n    const handleChange = ({ target: { name, value } }) => {\n        if (name === 'name')\n            setName(value)\n        else\n            setNumber(value)\n\n    }\n    \n    const handlerSubmit = (evt) => {\n        evt.preventDefault();\n        const newContact = {\n            id: nanoid(),\n            name: name,\n            number: number\n        }\n        sendUserData(newContact);\n\n        evt.target.elements.name.value = \"\";\n        evt.target.elements.number.value = \"\";\n    }\n\n    return (\n        <>\n            <form onSubmit={handlerSubmit} className={css.formuser}>\n                <label htmlFor=\"name\">Name</label>\n                <input onChange={handleChange} type=\"text\" name=\"name\" required />\n                <label htmlFor=\"number\">Number</label>\n                <input onChange={handleChange} type=\"tel\" name=\"number\" required />\n                <button type=\"submit\">Add contact</button>\n            </form>\n        </>\n    )\n}\n\nexport default FormUser\n","import Contacts from 'components/Contacts/Contacts'\nimport Filter from 'components/Filter/Filter'\nimport FormUser from 'components/FormUser/FormUser'\nimport React from 'react'\n\nconst ContactsPage = () => {\n  return (\n    <>\n      <FormUser />\n      <Filter />\n      <Contacts/>\n    </>\n  )\n}\n\nexport default ContactsPage"],"names":["_ref","contact","children","_jsxs","id","name","number","selectorContacts","state","contacts","selectorLoading","loading","selectorError","error","selectorVisibleContacts","createSelector","filter","toLowerCase","includes","useSelector","dispatch","useDispatch","useEffect","getContactsThunk","handleDelete","evt","deleteContactThunk","target","parentElement","_Fragment","_jsx","map","ElementContact","className","css","onClick","type","onChange","setFilterAction","value","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","handleChange","_ref2","_ref2$target","onSubmit","preventDefault","data","newContact","find","alert","addContactThunk","elements","htmlFor","required","FormUser","Filter","Contacts"],"sourceRoot":""}